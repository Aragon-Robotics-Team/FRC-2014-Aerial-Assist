#include "WPILib.h"
#include <math.h>

#define _USE_MATH_DEFINES

const float DistancePerTick = ((4*M_PI)/12)/1200;

using namespace std;

class PidTest : public SimpleRobot {
	
	Joystick leftStick, rightStick;	//BEGIN Object creation
	Talon leftMotor, rightMotor;
	Encoder leftEncoder, rightEncoder;
	PIDController leftPID, rightPID;
	DriverStationLCD* driverStation;	//END Object creation
	
public:
	PidTest():
	leftStick(1),
	rightStick(2),
	leftMotor(1),
	rightMotor(2),
	leftEncoder(1, 2),
	rightEncoder(3, 4),
	leftPID(0.1, 0.001, 0.0, &leftEncoder, &leftMotor),	//Calibrate later
	rightPID(0.1, 0.001, 0.0, &rightEndcoder, &rightMotor){

	}
	
	void Autonomous() {
		leftEncoder.Start();
		rightEncoder.Start();
		leftEncoder.SetDistancePerPulse(DistancePerTick);
		rightEncoder.SetDistancePerPulse(DistancePerTick);
		leftPID.Reset();
		rightPID.Reset();
		leftPID.Enable();
		rightPID.Enable();
		leftPID.SetSetPoint(10 / DistancePerTick);	//ticks in  10ft
		rightPID.SetSetPoint(10 / DistancePerTick);
		Wait(10);
		~Autonomous();
	}
	void PIDDrive() {
		leftPID.SetSetPoint((leftStick.GetY() + 1.0) * 2.5);
		rightPID.SetSetPoint((rightStick.GetY() + 1.0) * 2.5);
		Wait(0.02);
	}
	void OperatorControl() {
		while(IsOperatorControl()) {
		
			driverStation = DriverStationLCD::GetInstance();
			
			PIDDrive();	//set up to be a task
			
			driverStation->PrintfLine(MotorrStationLCD::kUser_Line1, "Maybe PID?");
			driverStation->UpdateLCD();
		}
	}
};
START_ROBOT_CLASS(PidTest);